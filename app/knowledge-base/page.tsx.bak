'use client'

import { useState, useMemo, useEffect, useRef, Suspense } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import {
  getAllDocuments,
  DocumentCategory,
  InsuranceKBDocument,
  getKnowledgeBaseStats,
  DOCUMENT_CATEGORIES
} from '@/lib/insurance-argumentation-kb'
import {
  groupAndNumberDocuments,
  searchNumberedDocuments,
  filterByCategory,
  getDocumentPreview,
  toggleBookmark,
  isBookmarked,
  getBookmarkedDocumentsList,
  NumberedDocument,
  CategoryGroup
} from '@/lib/kb-numbering'

// Force dynamic rendering
export const dynamic = 'force-dynamic'

const CATEGORY_LABELS: Record<DocumentCategory, string> = {
  pushback: 'Insurance Pushbacks',
  building_codes: 'Building Codes',
  manufacturer_specs: 'GAF Guidelines',
  warranties: 'Warranties',
  training: 'Training Materials',
  licenses: 'State Licenses',
  agreements: 'Contractual Agreements',
  email_templates: 'Email Templates',
  sales_scripts: 'Sales Scripts',
  photo_examples: 'Photo Examples',
  templates: 'Document Templates',
  reports: 'Inspection Reports',
  photo_reports: 'Sample Photo Reports',
  certifications: 'Certifications & Licenses',
  training_scripts: 'Call & Meeting Scripts',
  training_materials: 'Training Manuals & Guides',
  pushback_strategies: 'Escalation Strategies',
  process_guides: 'Process & How-To Guides',
  reference: 'Quick Reference Materials'
}

const CATEGORY_COLORS: Record<DocumentCategory, string> = {
  pushback: 'from-red-500 to-red-600',
  building_codes: 'from-blue-500 to-blue-600',
  manufacturer_specs: 'from-orange-500 to-orange-600',
  warranties: 'from-green-500 to-green-600',
  training: 'from-purple-500 to-purple-600',
  licenses: 'from-indigo-500 to-indigo-600',
  agreements: 'from-gray-500 to-gray-600',
  email_templates: 'from-pink-500 to-pink-600',
  sales_scripts: 'from-teal-500 to-teal-600',
  photo_examples: 'from-amber-500 to-amber-600',
  templates: 'from-cyan-500 to-cyan-600',
  reports: 'from-emerald-500 to-emerald-600',
  photo_reports: 'from-fuchsia-500 to-fuchsia-600',
  certifications: 'from-yellow-500 to-yellow-600',
  training_scripts: 'from-lime-500 to-lime-600',
  training_materials: 'from-violet-500 to-violet-600',
  pushback_strategies: 'from-rose-500 to-rose-600',
  process_guides: 'from-sky-500 to-sky-600',
  reference: 'from-slate-500 to-slate-600'
}

export default function KnowledgeBasePage() {
  const router = useRouter()
  const [mounted, setMounted] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<DocumentCategory | 'all'>('all')
  const [selectedDocument, setSelectedDocument] = useState<NumberedDocument | null>(null)
  const [bookmarksOnly, setBookmarksOnly] = useState(false)
  const [bookmarkedDocs, setBookmarkedDocs] = useState<Set<string>>(new Set())

  // State for preloaded documents
  const [preloadedDocs, setPreloadedDocs] = useState<InsuranceKBDocument[]>([])

  // State for images manifest
  const [imagesManifest, setImagesManifest] = useState<Record<string, string[]>>({})
  const [photoLabels, setPhotoLabels] = useState<Record<string, Record<string, string[]>>>({})

  // Load preloaded documents from JSON on client side
  useEffect(() => {
    fetch('/kb-documents.json')
      .then(res => res.json())
      .then(docs => {
        setPreloadedDocs(docs)
        console.log(`[KB] Loaded ${docs.length} preloaded documents`)
      })
      .catch(err => console.error('[KB] Failed to load preloaded documents:', err))
  }, [])

  // Load images manifest
  useEffect(() => {
    fetch('/kb-images-manifest.json')
      .then(res => res.json())
      .then(manifest => {
        // Filter out metadata fields (starting with _)
        const filteredManifest = Object.entries(manifest)
          .filter(([key]) => !key.startsWith('_'))
          .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
        setImagesManifest(filteredManifest)
        console.log(`[KB] Loaded images manifest with ${Object.keys(filteredManifest).length} documents`)
      })
      .catch(err => console.error('[KB] Failed to load images manifest:', err))
  }, [])

  // Load photo labels
  useEffect(() => {
    fetch('/kb-photo-labels.json')
      .then(res => res.json())
      .then(labels => {
        setPhotoLabels(labels)
        console.log(`[KB] Loaded photo labels for ${Object.keys(labels).length} documents`)
      })
      .catch(err => console.error('[KB] Failed to load photo labels:', err))
  }, [])

  // Combine manual documents (from getAllDocuments) with loaded preloaded documents
  // Filter out training-only documents (not visible to users)
  const allDocuments = useMemo(() => {
    const manualDocs = getAllDocuments()
    let combined = manualDocs

    // If preloadedDocs are loaded, combine them
    if (preloadedDocs.length > 0) {
      combined = [...manualDocs, ...preloadedDocs]
    }

    // Filter out training documents (visible_to_users: false)
    return combined.filter(doc => {
      const isTrainingOnly = (doc.metadata as any)?.training_only === true ||
                             (doc.metadata as any)?.visible_to_users === false ||
                             doc.category === 'training'
      return !isTrainingOnly
    })
  }, [preloadedDocs])

  // Group documents with numbering
  const categoryGroups = useMemo(() => {
    return groupAndNumberDocuments(allDocuments)
  }, [allDocuments])

  // Recalculate stats when allDocuments changes
  const stats = useMemo(() => {
    return {
      totalDocuments: allDocuments.length,
      highSuccessDocuments: allDocuments.filter(doc => (doc.metadata.success_rate ?? 0) > 90).length
    }
  }, [allDocuments])

  useEffect(() => {
    setMounted(true)
    // Load bookmarks from localStorage
    if (typeof window !== 'undefined') {
      try {
        const bookmarks = localStorage.getItem('kb_bookmarks')
        if (bookmarks) {
          setBookmarkedDocs(new Set(JSON.parse(bookmarks)))
        }
      } catch (error) {
        console.error('Failed to load bookmarks:', error)
      }
    }
  }, [])

  // Filter documents based on search, category, and bookmarks
  const filteredDocuments = useMemo(() => {
    let docs: NumberedDocument[]

    if (searchQuery.trim()) {
      docs = searchNumberedDocuments(categoryGroups, searchQuery)
    } else if (selectedCategory !== 'all') {
      docs = filterByCategory(categoryGroups, selectedCategory)
    } else {
      docs = categoryGroups.flatMap(group => group.documents)
    }

    // Filter by bookmarks if enabled
    if (bookmarksOnly) {
      docs = docs.filter(doc => bookmarkedDocs.has(doc.id))
    }

    return docs
  }, [searchQuery, selectedCategory, bookmarksOnly, categoryGroups, bookmarkedDocs])

  // Group filtered documents by category for display
  const displayGroups = useMemo(() => {
    const groups = new Map<DocumentCategory, NumberedDocument[]>()

    filteredDocuments.forEach(doc => {
      if (!groups.has(doc.category)) {
        groups.set(doc.category, [])
      }
      groups.get(doc.category)!.push(doc)
    })

    return Array.from(groups.entries()).map(([category, docs]) => ({
      category,
      documents: docs,
      group: categoryGroups.find(g => g.category === category)!
    }))
  }, [filteredDocuments, categoryGroups])

  const handleBookmarkToggle = (documentId: string) => {
    const newBookmarks = new Set(bookmarkedDocs)
    if (newBookmarks.has(documentId)) {
      newBookmarks.delete(documentId)
    } else {
      newBookmarks.add(documentId)
    }
    setBookmarkedDocs(newBookmarks)

    // Persist to localStorage
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem('kb_bookmarks', JSON.stringify([...newBookmarks]))
      } catch (error) {
        console.error('Failed to save bookmarks:', error)
      }
    }
  }

  const handleCopyDocument = async (doc: NumberedDocument) => {
    try {
      await navigator.clipboard.writeText(doc.content)
      alert('Document copied to clipboard!')
    } catch (error) {
      console.error('Failed to copy:', error)
      alert('Failed to copy document')
    }
  }

  const handleDownloadDocument = (doc: NumberedDocument) => {
    const blob = new Blob([doc.content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${doc.filename.replace(/\.md$/, '')}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handlePrintDocument = (doc: NumberedDocument) => {
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>${doc.title}</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; }
              h1 { color: #DC143C; }
              pre { white-space: pre-wrap; }
            </style>
          </head>
          <body>
            <h1>${doc.title}</h1>
            <p><strong>Category:</strong> ${CATEGORY_LABELS[doc.category]}</p>
            <p><strong>Document Number:</strong> ${doc.displayNumber}</p>
            <hr>
            <pre>${doc.content}</pre>
          </body>
        </html>
      `)
      printWindow.document.close()
      printWindow.print()
    }
  }

  if (!mounted) {
    return null
  }

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <header className="flex-shrink-0 bg-gradient-to-r from-red-600 to-red-700 text-white shadow-xl">
        <div className="max-w-full px-6 py-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.push('/')}
                className="w-10 h-10 rounded-full bg-white/20 hover:bg-white/30 transition-colors flex items-center justify-center"
                aria-label="Back to home"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
              </button>
              <div className="w-12 h-12 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center border-2 border-white/40">
                <span className="text-2xl">📚</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold">Susan AI-21 Knowledge Base</h1>
                <p className="text-sm text-red-100">
                  {stats.totalDocuments} Documents • {stats.highSuccessDocuments} High Success Rate
                </p>
              </div>
            </div>
          </div>

          {/* Search Bar */}
          <div className="relative mb-3">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search documents by title, keywords, content..."
              className="w-full px-4 py-3 pl-12 bg-white/20 backdrop-blur-sm border-2 border-white/30 rounded-xl text-white placeholder-white/70 focus:outline-none focus:border-white/50 focus:bg-white/30 transition-all"
            />
            <svg className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="absolute right-4 top-1/2 -translate-y-1/2 text-white/70 hover:text-white"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>

          {/* Filters */}
          <div className="flex flex-wrap gap-2 items-center">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value as DocumentCategory | 'all')}
              className="px-3 py-2 bg-white/20 backdrop-blur-sm border-2 border-white/30 rounded-lg text-white text-sm focus:outline-none focus:border-white/50 cursor-pointer"
            >
              <option value="all" className="text-gray-900">All Categories ({allDocuments.length})</option>
              {categoryGroups.map(group => (
                <option key={group.category} value={group.category} className="text-gray-900">
                  {group.icon} {group.label} ({group.documents.length})
                </option>
              ))}
            </select>

            <button
              onClick={() => setBookmarksOnly(!bookmarksOnly)}
              className={`px-3 py-2 rounded-lg text-sm font-medium transition-all ${
                bookmarksOnly
                  ? 'bg-yellow-500 text-white'
                  : 'bg-white/20 backdrop-blur-sm border-2 border-white/30 text-white hover:bg-white/30'
              }`}
            >
              {bookmarksOnly ? '⭐ Bookmarked' : '☆ Show Bookmarks'}
            </button>

            <span className="ml-auto text-sm text-white/90">
              Showing {filteredDocuments.length} {filteredDocuments.length === 1 ? 'document' : 'documents'}
            </span>
          </div>
        </div>
      </header>

      {/* Split View Container */}
      <div className="flex-1 flex overflow-hidden">
        {/* LEFT SIDE - Document List */}
        <div className="w-full md:w-1/2 border-r border-gray-300 bg-white overflow-y-auto">
          <div className="p-6">
            {displayGroups.length === 0 ? (
              <div className="flex flex-col items-center justify-center py-12 text-center">
                <div className="w-24 h-24 rounded-full bg-gray-100 flex items-center justify-center mb-4">
                  <span className="text-5xl">🔍</span>
                </div>
                <h3 className="text-xl font-semibold text-gray-800 mb-2">No documents found</h3>
                <p className="text-gray-600">Try adjusting your search or filters</p>
              </div>
            ) : (
              displayGroups.map(({ category, documents, group }) => (
                <div key={category} className="mb-8">
                  {/* Category Header */}
                  <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-gradient-to-r ${CATEGORY_COLORS[category]} text-white font-bold mb-4`}>
                    <span className="text-xl">{group.icon}</span>
                    <span>{group.label}</span>
                    <span className="text-sm opacity-90">({documents.length})</span>
                  </div>

                  {/* Document List */}
                  <div className="space-y-2">
                    {documents.map(doc => (
                      <div
                        key={doc.id}
                        role="button"
                        tabIndex={0}
                        onClick={() => setSelectedDocument(doc)}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault()
                            setSelectedDocument(doc)
                          }
                        }}
                        className={`w-full text-left p-4 rounded-lg border-2 transition-all cursor-pointer ${
                          selectedDocument?.id === doc.id
                            ? 'border-red-500 bg-red-50 shadow-lg'
                            : 'border-gray-200 bg-white hover:border-red-300 hover:shadow-md'
                        }`}
                      >
                        <div className="flex items-start gap-3">
                          {/* Document Number */}
                          <div className={`flex-shrink-0 w-12 h-12 rounded-lg bg-gradient-to-br ${CATEGORY_COLORS[category]} text-white font-bold flex items-center justify-center`}>
                            {doc.displayNumber}
                          </div>

                          {/* Document Info */}
                          <div className="flex-1 min-w-0">
                            <h3 className="font-bold text-gray-900 mb-1 line-clamp-1">
                              {doc.title}
                            </h3>
                            <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                              {getDocumentPreview(doc, 80)}
                            </p>
                            <div className="flex items-center gap-3 text-xs">
                              {doc.metadata.success_rate && (
                                <span className="text-green-600 font-semibold">
                                  {doc.metadata.success_rate}% success
                                </span>
                              )}
                              {doc.metadata.states && doc.metadata.states.length > 0 && (
                                <span className="text-gray-500">
                                  {doc.metadata.states.slice(0, 2).join(', ')}
                                </span>
                              )}
                            </div>
                          </div>

                          {/* Bookmark Button */}
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              handleBookmarkToggle(doc.id)
                            }}
                            className="flex-shrink-0 text-2xl hover:scale-110 transition-transform"
                            aria-label="Toggle bookmark"
                          >
                            {bookmarkedDocs.has(doc.id) ? '⭐' : '☆'}
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* RIGHT SIDE - Document Viewer */}
        <div className="hidden md:block w-1/2 bg-gray-50 overflow-y-auto">
          {selectedDocument ? (
            <DocumentViewerContent
              document={selectedDocument}
              onCopy={handleCopyDocument}
              onDownload={handleDownloadDocument}
              onPrint={handlePrintDocument}
              isBookmarked={bookmarkedDocs.has(selectedDocument.id)}
              onToggleBookmark={handleBookmarkToggle}
              imagesManifest={imagesManifest}
              photoLabels={photoLabels}
            />
          ) : (
            <div className="flex flex-col items-center justify-center h-full text-center p-12">
              <div className="w-32 h-32 rounded-full bg-gradient-to-br from-red-100 to-red-200 flex items-center justify-center mb-6">
                <span className="text-6xl">📄</span>
              </div>
              <h3 className="text-2xl font-bold text-gray-800 mb-2">Select a Document</h3>
              <p className="text-gray-600 max-w-md">
                Choose a document from the list on the left to view its full content and details
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Mobile Document Viewer Modal */}
      {selectedDocument && (
        <div className="md:hidden fixed inset-0 z-50 bg-white overflow-y-auto">
          <div className="sticky top-0 bg-gradient-to-r from-red-600 to-red-700 text-white p-4 shadow-lg z-10">
            <div className="flex items-center justify-between mb-2">
              <button
                onClick={() => setSelectedDocument(null)}
                className="w-10 h-10 rounded-full bg-white/20 hover:bg-white/30 transition-colors flex items-center justify-center"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
              <h2 className="text-lg font-bold flex-1 text-center mx-4">Document {selectedDocument.displayNumber}</h2>
              <div className="w-10" />
            </div>
          </div>
          <DocumentViewerContent
            document={selectedDocument}
            onCopy={handleCopyDocument}
            onDownload={handleDownloadDocument}
            onPrint={handlePrintDocument}
            isBookmarked={bookmarkedDocs.has(selectedDocument.id)}
            onToggleBookmark={handleBookmarkToggle}
            imagesManifest={imagesManifest}
            photoLabels={photoLabels}
          />
        </div>
      )}
    </div>
  )
}

// Document Viewer Content Component
function DocumentViewerContent({
  document: doc,  // Rename to avoid conflict with global document object
  onCopy,
  onDownload,
  onPrint,
  isBookmarked,
  onToggleBookmark,
  imagesManifest,
  photoLabels
}: {
  document: NumberedDocument
  onCopy: (doc: NumberedDocument) => void
  onDownload: (doc: NumberedDocument) => void
  onPrint: (doc: NumberedDocument) => void
  isBookmarked: boolean
  onToggleBookmark: (id: string) => void
  imagesManifest: Record<string, string[]>
  photoLabels: Record<string, Record<string, string[]>>
}) {
  const [copied, setCopied] = useState(false)
  const [selectedImage, setSelectedImage] = useState<string | null>(null)
  const [imageLoading, setImageLoading] = useState(false)
  const [imageError, setImageError] = useState(false)
  const [useApiRoute, setUseApiRoute] = useState(false)
  const categoryColor = CATEGORY_COLORS[doc.category]

  // Add keyboard navigation for image modal
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && selectedImage) {
        setSelectedImage(null)
      }
    }

    if (selectedImage) {
      window.addEventListener('keydown', handleKeyDown)
      // Prevent body scrolling when modal is open
      if (typeof document !== 'undefined' && document.body) {
        document.body.style.overflow = 'hidden'
      }
    }

    return () => {
      window.removeEventListener('keydown', handleKeyDown)
      if (typeof document !== 'undefined' && document.body) {
        document.body.style.overflow = ''
      }
    }
  }, [selectedImage])

  const handleCopy = async () => {
    await onCopy(document)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Get images for this document (normalize document ID)
  // Remove common file extensions (.md, .pdf, .docx) and normalize to lowercase with underscores
  const documentId = doc.filename?.replace(/\.(md|pdf|docx)$/i, '').replace(/\s+/g, '_').replace(/-/g, '_').toLowerCase() ||
                     doc.id.replace(/\s+/g, '_').replace(/-/g, '_').toLowerCase()
  const documentImages = imagesManifest[documentId] || []

  return (
    <div className="p-6">
      {/* Document Header */}
      <div className={`rounded-xl bg-gradient-to-r ${categoryColor} text-white p-6 mb-6 shadow-lg`}>
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              <span className="px-3 py-1 bg-white/20 rounded-full text-sm font-bold">
                \1doc.displayNumber}
              </span>
              <span className="text-sm opacity-90">{CATEGORY_LABELS\1doc.category]}</span>
            </div>
            <h2 className="text-2xl font-bold mb-2">\1doc.title}</h2>
            <p className="text-white/90 text-sm">\1doc.summary}</p>
          </div>
        </div>

        {/* Metadata Badges */}
        <div className="flex flex-wrap gap-2">
          \1doc.metadata.success_rate && (
            <span className="px-3 py-1 bg-green-500 rounded-full text-xs font-semibold">
              \1doc.metadata.success_rate}% Success
            </span>
          )}
          {\1doc.metadata as any).legal_weight && (
            <span className="px-3 py-1 bg-white/20 rounded-full text-xs font-semibold">
              {(\1doc.metadata as any).legal_weight).toUpperCase()} Legal Weight
            </span>
          )}
          \1doc.metadata.confidence_level && (
            <span className="px-3 py-1 bg-white/20 rounded-full text-xs font-semibold">
              \1doc.metadata.confidence_level.toUpperCase()} Confidence
            </span>
          )}
          \1doc.metadata.states &&\1doc.metadata.states.length > 0 && (
            <span className="px-3 py-1 bg-white/20 rounded-full text-xs font-semibold">
              \1doc.metadata.states.join(', ')}
            </span>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-wrap gap-3 mb-6">
        <button
          onClick={handleCopy}
          className="flex-1 min-w-[120px] px-4 py-3 bg-white border-2 border-blue-500 hover:bg-blue-50 rounded-lg text-blue-600 font-semibold transition-all flex items-center justify-center gap-2"
        >
          {copied ? (
            <>
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              Copied!
            </>
          ) : (
            <>
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              Copy
            </>
          )}
        </button>
        <button
          onClick={() => onDownload(document)}
          className="flex-1 min-w-[120px] px-4 py-3 bg-white border-2 border-green-500 hover:bg-green-50 rounded-lg text-green-600 font-semibold transition-all flex items-center justify-center gap-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Download
        </button>
        <button
          onClick={() => onPrint(document)}
          className="flex-1 min-w-[120px] px-4 py-3 bg-white border-2 border-purple-500 hover:bg-purple-50 rounded-lg text-purple-600 font-semibold transition-all flex items-center justify-center gap-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
          </svg>
          Print
        </button>
        <button
          onClick={() => onToggleBookmark\1doc.id)}
          className={`px-4 py-3 rounded-lg font-semibold transition-all flex items-center justify-center gap-2 ${
            isBookmarked
              ? 'bg-yellow-500 text-white hover:bg-yellow-600'
              : 'bg-white border-2 border-yellow-500 text-yellow-600 hover:bg-yellow-50'
          }`}
        >
          <span className="text-xl">{isBookmarked ? '⭐' : '☆'}</span>
          {isBookmarked ? 'Bookmarked' : 'Bookmark'}
        </button>
      </div>

      {/* Document Content */}
      <div className="bg-white rounded-xl shadow-md p-6 mb-6">
        <div className="prose prose-sm max-w-none">
          <pre className="whitespace-pre-wrap font-sans text-gray-700 leading-relaxed">
            \1doc.content}
          </pre>
        </div>
      </div>

      {/* Metadata Sections */}
      \1doc.keywords.length > 0 && (
        <div className="bg-white rounded-xl shadow-md p-6 mb-6">
          <h3 className="text-lg font-bold text-gray-800 mb-3">Keywords</h3>
          <div className="flex flex-wrap gap-2">
            \1doc.keywords.map((keyword, index) => (
              <span
                key={`$\1doc.id}-keyword-${index}-${keyword}`}
                className="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm text-gray-700 transition-colors"
              >
                {keyword}
              </span>
            ))}
          </div>
        </div>
      )}

      \1doc.metadata.code_citations &&\1doc.metadata.code_citations.length > 0 && (
        <div className="bg-white rounded-xl shadow-md p-6 mb-6">
          <h3 className="text-lg font-bold text-gray-800 mb-3">Code Citations</h3>
          <div className="flex flex-wrap gap-2">
            \1doc.metadata.code_citations.map((citation) => (
              <span
                key={`$\1doc.id}-citation-${citation}`}
                className="px-3 py-1 bg-blue-100 hover:bg-blue-200 rounded-lg text-sm font-mono text-blue-800 transition-colors cursor-pointer"
                onClick={async () => {
                  await navigator.clipboard.writeText(citation)
                  alert(`Copied: ${citation}`)
                }}
              >
                {citation}
              </span>
            ))}
          </div>
        </div>
      )}

      \1doc.metadata.scenarios &&\1doc.metadata.scenarios.length > 0 && (
        <div className="bg-white rounded-xl shadow-md p-6 mb-6">
          <h3 className="text-lg font-bold text-gray-800 mb-3">Relevant Scenarios</h3>
          <div className="flex flex-wrap gap-2">
            \1doc.metadata.scenarios.map((scenario) => (
              <span
                key={`$\1doc.id}-scenario-${scenario}`}
                className="px-3 py-1 bg-purple-100 rounded-full text-sm text-purple-800"
              >
                {scenario.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Document Images Section */}
      {documentImages.length > 0 && (
        <div className="bg-white rounded-xl shadow-md p-6">
          <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
            <span>📸</span>
            Document Images ({documentImages.length})
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {documentImages.map((imageName) => {
              const thumbnailName = imageName.replace('.png', '_thumb.png')

              // Extract page number and image index from filename
              // Format: documentId_page1_img1.png -> page1, img1
              const match = imageName.match(/_page(\d+)_img(\d+)\.png$/)
              let imageLabel = ''
              if (match) {
                const pageNum = parseInt(match[1])
                const imgIndex = parseInt(match[2]) - 1 // 0-indexed for array
                const pageKey = `page${pageNum}`
                imageLabel = photoLabels[documentId]?.[pageKey]?.[imgIndex] || ''
              }

              return (
                <div key={imageName} className="flex flex-col">
                  <div
                    className="group relative cursor-pointer overflow-hidden rounded-lg border-2 border-gray-200 hover:border-red-500 transition-all shadow-sm hover:shadow-lg"
                    onClick={() => {
                      setSelectedImage(imageName)
                      setImageError(false)
                      setImageLoading(true)
                      setUseApiRoute(false)
                    }}
                    onContextMenu={(e) => e.preventDefault()}
                  >
                    <img
                      src={`/kb-images/${thumbnailName}`}
                      alt={imageLabel || `Document image from $\1doc.title}`}
                      className="w-full h-auto object-contain bg-gray-50"
                      style={{ userSelect: 'none' }}
                      draggable={false}
                      onError={(e) => {
                        // Fallback to full image if thumbnail doesn't exist
                        const img = e.target as HTMLImageElement
                        if (img.src.includes('_thumb.png')) {
                          img.src = `/kb-images/${imageName}`
                        }
                      }}
                      onContextMenu={(e) => e.preventDefault()}
                    />
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/40 transition-all flex items-center justify-center">
                      <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                        <div className="bg-white rounded-full p-3 shadow-xl">
                          <svg className="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                  {imageLabel && (
                    <div className="mt-2 text-sm text-gray-700 font-medium text-center px-2">
                      {imageLabel}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>
      )}

      {/* Image Modal - Enhanced Lightbox */}
      {selectedImage && (
        <div
          className="fixed inset-0 z-[70] bg-black/95 flex items-center justify-center p-4"
          onClick={() => setSelectedImage(null)}
          onContextMenu={(e) => e.preventDefault()}
        >
          <div className="relative w-full h-full flex flex-col items-center justify-center">
            {/* Close Button - Top Right */}
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute top-4 right-4 z-10 w-12 h-12 rounded-full bg-red-600 hover:bg-red-700 text-white transition-all shadow-lg hover:shadow-xl flex items-center justify-center"
              aria-label="Close image"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>

            {/* Image Container */}
            <div className="relative max-w-7xl max-h-[85vh] w-full h-full flex items-center justify-center">
              {imageLoading && (
                <div className="absolute inset-0 flex items-center justify-center z-10">
                  <div className="text-center">
                    <div className="w-12 h-12 border-4 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-4" />
                    <p className="text-white text-sm">Loading image...</p>
                  </div>
                </div>
              )}

              {imageError && !imageLoading && (
                <div className="absolute inset-0 flex items-center justify-center z-10">
                  <div className="text-center text-white p-8 max-w-md">
                    <svg className="w-16 h-16 mx-auto mb-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <h3 className="text-xl font-bold mb-2">Failed to Load Image</h3>
                    <p className="text-sm mb-4 opacity-80">{selectedImage}</p>
                    <div className="flex flex-col gap-2">
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          setImageError(false)
                          setImageLoading(true)
                          setUseApiRoute(true)
                        }}
                        className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
                      >
                        Try API Route
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          window.open(useApiRoute ? `/api/kb-images/${selectedImage}` : `/kb-images/${selectedImage}`, '_blank')
                        }}
                        className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                      >
                        Open in New Tab
                      </button>
                    </div>
                  </div>
                </div>
              )}

              <img
                src={useApiRoute ? `/api/kb-images/${selectedImage}` : `/kb-images/${selectedImage}`}
                alt="Full size document image"
                className="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
                onClick={(e) => e.stopPropagation()}
                onContextMenu={(e) => e.preventDefault()}
                onLoad={() => {
                  setImageLoading(false)
                  setImageError(false)
                  console.log('[KB] ✓ Image loaded:', selectedImage, useApiRoute ? '(API route)' : '(static)')
                }}
                onLoadStart={() => {
                  setImageLoading(true)
                  setImageError(false)
                }}
                onError={(e) => {
                  console.error('[KB] ✗ Image load failed:', selectedImage, useApiRoute ? '(API route)' : '(static)')
                  setImageLoading(false)
                  if (!useApiRoute) {
                    // Try API route as fallback
                    console.log('[KB] → Trying API route fallback...')
                    setUseApiRoute(true)
                    const img = e.target as HTMLImageElement
                    img.src = `/api/kb-images/${selectedImage}`
                  } else {
                    // Both methods failed
                    setImageError(true)
                  }
                }}
                style={{
                  userSelect: 'none',
                  display: (imageLoading || imageError) ? 'none' : 'block'
                }}
              />
            </div>

            {/* Bottom Control Bar */}
            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent text-white p-6">
              <div className="max-w-7xl mx-auto flex items-center justify-between gap-4">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium opacity-90 truncate">{selectedImage}</p>
                </div>
                <div className="flex gap-3 flex-shrink-0">
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      window.open(`/kb-images/${selectedImage}`, '_blank')
                    }}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-sm font-medium transition-colors flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                    Open in New Tab
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      setSelectedImage(null)
                    }}
                    className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-sm font-medium transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
